/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi*/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos de bajo nivel*/
{

			<MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >		

}

TOKEN: /* Nombres de objetos de bajo nivel*/
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN : /*Definición de un entero*/
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}



/* Que rayos es esto profe */
//boolean command(uniandes.lym.robot.view.Console sistema) :
boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

/* Reglas de producción???*/
/* '|' son or's */
/* PREGUNAR POR ESTA VAINA world.turnRight();salida = "Command: Turnright"; */
	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

/*TOKENS DE LENGUAJE DE ALTO NIVEL */

TOKEN:
{
	< #MAY: ["A"-"B"] >
|   < #MIN: ["a"-"b"]>
| 	< #NUM: ["0" -"9"]>
| 	< NAME: (<MAY>|<MIN>)+ (<MAY>|<MIN>|<NUM>)*>
| 	< NUMS: (< NUM >)+>
}

/* CONDICIONES*/
TOKEN:
{
	< FACING: "facing">
| 	< CANPUT: "canput">
| 	< CANPICK: "canpick" >
| 	< CANMOVEINDIR: "canmoveindir" >
| 	< CANJUMPINDIR: "canjumpindir" >
| 	< CANMOVETOTHE: "canmovetothe" >
| 	< CANJUMPTOTHE: "canjumptothe" >
| 	< NOT:	"not" >
|   < ASSIGNTO: "assignto" >
|	< GOTO: "goto">
| 	< MOVE: "move">
| 	< TURN: "turn">
| 	< FACE: "face">
| 	< PUT: "put">
| 	< PICK: "pick">
| 	< MOVETOTHE: "movetothe">
| 	< MOVEINDIR: "moveindir">
| 	< JUMPTOTHE: "jumptothe">
| 	< JUMPINDIR: "jumpindir">
|  	< NOP: "nop" >
}


/*CONTROL*/
TOKEN:
{
 	< IF: "if" >
| 	< THEN: "then" >
| 	< ELSE: "else" >
| 	< WHILE: "while" >
| 	< DO: "do" >
| 	< REPEAT: "repeat" >
}

TOKEN:
{
 	< FRONT: "front" >
| 	< RIGHT: "right" >
| 	< LEFT: "left" >
| 	< BACK: "back" >
| 	< NORTH: "north" >
| 	< SOUTH: "south" >
| 	< EAST: "east">
|	< WEST: " west" >
| 	< AROUND: "around">
}

TOKEN:
{
  	< BALLOONS:"balloons" >
  	< CHIPS: "chips"> 
}

void X ():
{}
{
	(< NAME >|< NUMS >)
}
void dir ():
{}
{
	(< FRONT >|< RIGHT>|< LEFT >|< BACK >)
}
void otn ():
{}
{
	(< NORTH >|< SOUTH >|< EAST >|< WEST >)
}
void OBJ ():
{}
{
	(< BALOONS >|< CHIPS >)
}
void D ():
{}
{
	(< LEFT >|< RIGHT >|< AROUND >)
}


void s0 ():
{}
{
	"ROBOT_R" body()
}

void body ():
{}
{
  vars() procs() blocks()
}

void vars ():
{ }
{
	"VARS" < NAME >(","< NAME >)* 
}

void procs ():
{ }
{
	"PROCS" definition()
}

void definition():
{}
{
  "[" "|" params() "|" instructions() "]"
}

void params ():
{ }
{
	< NAME >(","< NAME >)* 
}

void instructions ():
{ }
{
	(command()|control()|call())(";"(command()|control()|call())*)
}

void blocks ():
{ }
{
	"[" instructions() "]"
}

/*COMANDOS*/
void command ():
{ }
{
	assignto()
| 	go_to()
| 	put()
| 	pick()
| 	movetothe()
| 	moveindir()
| 	jumptothe()
| 	jumpindir()
| 	move()
| 	turn()
| 	face()
| 	nop()
}

void assignto ():
{ }
{
 	< ASSIGNTO > ":" < NUMS > "," < NAME >
}
void go_to ():
{ }
{
 	< GOTO > ":" < X >","< X >
}
void put ():
{ }
{
	< PUT > ":" < X > "," < OBJ >
}
void pick ():
{ }
{
 	< PICK > ":" < X > "," < OBJ >	
}
void movetothe ():
{ }
{
  < MOVETOTHE > ":" < X > "," < DIR >
}
void moveindir ():
{ }
{	
 	 < MOVEINDIR > ":"< X > "," < OTN >
}
void jumptothe ():
{ }
{
 	< JUMPTOTHE > ":" < X > "," < DIR > 
}
void jumpindir ():
{ }
{
 	< JUMPINDIR > ":"< X > "," < OTN >
}
void move ():
{ }
{
  	< MOVE > ":" < X >
}
void turn ():
{ }
{
  < TURN > ":" < D > 
}
void face ():
{ }
{
  < FACE > ":" < OTN >
}
void nop ():
{ }
{
	< NOP > ":"  
}


/*CONTROL*/
void control ():
{ }
{
	conditional() | loop() | repeat()
}

/*CONDICIONALES*/
void conditional ():
{ }
{
	<IF> ":" condition() <THEN> ":" blocks() <ELSE> ":" blocks() 
}

void condition ():
{}
{
	facing()
|	canput()
|	canpick()
|	canmoveindir()
|	canjumpindir()
|	canmovetothe()
|	canjumptothe()
|	not()
}

void facing ():
{}
{
	<FACING> ":" (<NORTH>|<SOUTH>|<EAST>|<WEST>)	
}

void canput():
{}
{
	<CANPUT> ":" <NAME> "," (<BALOONS> | <CHIPS>)	
}

void canpick():
{}
{
	<CANPICK> ":" <NAME> "," (<BALOONS> | <CHIPS>)
}

void canmoveindir():
{}
{
	<CANMOVEINDIR> ":" <NAME> "," (<NORTH>|<SOUTH>|<EAST>|<WEST>)
}

void canjumpindir():
{}
{
	<CANJUMPINDIR> ":" <NAME> "," (<NORTH>|<SOUTH>|<EAST>|<WEST>)
}

void canmovetothe():
{}
{
	<CANMOVETOTHE> ":" <NAME> "," (<FRONT>|<RIGHT>|<LEFT>|<BACK>)
}

void canjumptothe():
{}
{
	<CANJUMPTOTHE> ":" <NAME> "," (<FRONT>|<RIGHT>|<LEFT>|<BACK>)
}

void not():
{}
{
	<NOT> ":" condition()
}


void loop ():
{ }
{
	<WHILE> ":" condition() <DO> ":" blocks()
}
void repeat ():
{ }
{
	<REPEAT> ":" (<NUMS>|<NAME>) blocks()
}

void call ():
{ }
{
	< NAME > ":" args() 
}

void args():
{}
{
  	< X >(","< X >)*
}
